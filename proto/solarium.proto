syntax = "proto3";
option go_package="github.com/chronojam/solarium/proto";
import "pkg/gamemodes/thewolfgame/proto/wolf.proto";
package solarium;

// The primary GRPC interface
service Solarium {
    // Constructs a new game with the given parameters.
    rpc NewGame(NewGameRequest) returns (SolariumGame) {}

    // Join an existing game
    rpc JoinGame(JoinGameRequest) returns (Player) {}

    // Subscribe to events from a given game.
    rpc GameUpdate(GameUpdateRequest) returns (stream GameUpdateResponse) {}

    // Subscribe to all global events from the server, including
    // annoucements, new game notifications etc.
    rpc GlobalUpdate(GlobalUpdateRequest) returns (stream GlobalUpdateResponse) {}

    // Allows a player to perform an action in a game
    rpc DoAction(DoActionRequest) returns (DoActionResponse) {}

    // Single call to request the current state of the game.
    rpc GameStatus(GameStatusRequest) returns (GameStatusResponse) {}
}

message NewGameRequest {
    // A List of valid gamemodes.
    enum GameMode {
        // A pvp game, where the objective is for the villagers
        // to route out the werewolves before they manage to kill them all!
        THEWOLFGAME = 0;
    }
    // A List of valid difficulties.
    enum DifficultyLevel {
        // A nice lesuirely game, plenty of room for mistakes
        EASY = 0;
        // A bit more of a challenge, mistakes have consequences
        NORMAL = 1;
        // You will need to work together to survive
        HARD = 2;
        // You will not survive, but you can try to last as long as possible
        INSANE = 3;
    }
    // Which gamemode you would like to request.
    GameMode Gamemode = 1;
    // How difficult this game should be
    DifficultyLevel Difficulty = 2;
}

// Represents a solarium Game
message SolariumGame {
    // ID is public identifier used for getting information about this game
    string ID = 1;
    string Name = 2;
    string Description = 3;
}

// Join an existing game, returns a Player.
message JoinGameRequest {
    // The Id of the game you wish to join, this is the public identifier.
    string GameID = 1;

    // The name of your player/character
    string Name = 2;
}

message Player {
    // The ID Of the player, in general this is also the 
    // secret key from a JoinGameResponse, so it should be kept
    // a secret from other clients.
    string ID = 1;

    // The player secret, this is used for performing actions on the player.
    string Secret = 2;

    // The Name of a player.
    string Name = 3;
}

message GameUpdateRequest {
    // the public Id of the game you wish to subscribe to events from
    string GameID = 1;
};

message GameUpdateResponse {
    // A bulk list of recent events from the game.
    repeated GameEvent Events = 1;
};

message GameEvent{
    // The name of the event.
    string Name = 1;
    // The Description of the event.
    string Desc = 2;

    // If you recieve this, then the game is over.
    bool IsGameOver = 3;

    TheWolfGameEvent TheWolfGame = 4;
};

message DoActionRequest {
    // What playerID is performing the action?
    // this is the same as the SecretKey from a
    // JoinGameResponse
    string PlayerID = 1;
    string PlayerSecret = 2;

    // What gameId is this player in?
    string GameID = 3;

    TheWolfGameAction TheWolfGame = 5;
};

message DoActionResponse {};

message GlobalUpdateRequest {};
message GlobalUpdateResponse {
    // A list of Global events
    repeated GlobalEvent Events = 1;
};

message GlobalEvent {
    string Notification = 1;
}

message GameStatusRequest {
    // The Id of the game you wish to get the status from
    string GameID = 1;
    // Pass me if you want only status of a particular player.
    // you will also need to pass the playerSecret here.
    string PlayerID = 2;
    string PlayerSecret = 3;
}
message GameStatusResponse {
    TheWolfGameStatus TheWolfGame = 2;
}